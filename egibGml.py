# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EgibGml
                                 A QGIS plugin
 Wtyczka do wczytywania danych Ewidencji Gruntów i Budynków w formacie GML
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-25
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Marek Wasilczyk (GIS Support Sp. z o.o.)
        email                : marek.wasilczyk@gis-support.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox
from .resources import *

from .egibGml_dockwidget import EgibGmlDockWidget
import os
import subprocess

from qgis.core import QgsVectorLayer, QgsProject, QgsDataProvider, QgsLayerTreeLayer, Qgis

from osgeo import ogr
#Variables necessary for xlink resolution in GMLs
os.environ['GML_SKIP_RESOLVE_ELEMS'] = 'NONE'
os.environ['GML_ATTRIBUTES_TO_OGR_FIELDS'] = 'YES'


class EgibGml:

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EgibGml_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.dockwidget = EgibGmlDockWidget()
        self.actions = []
        self.menu = self.tr(u'&EGiB GML')
        self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
        self.toolbar = self.iface.addToolBar(u'EgibGml')
        self.toolbar.setObjectName(u'EgibGml')

        #Signals handling
        self.dockwidget.fileButton.clicked.connect(self.loadGml)


    def tr(self, message):
        """Get the translation for a string using Qt translation API."""

        return QCoreApplication.translate('EgibGml', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/egibGml/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'EGiB GML'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def loadGml(self):
        gmlFile = QFileDialog.getOpenFileName(None, 'Wybierz plik GML...', filter='*.gml *.xml')[0]
        gmlName = os.path.basename(gmlFile)[:-4]
        gmlNoExt = gmlFile[:-4]
        gpkgFile = '%s.gpkg' % gmlNoExt

        def gml2gpkg():
            """Convert GML to GeoPackage"""
            try:
                subprocess.check_call(['ogr2ogr', '-f', 'GPKG', gpkgFile, gmlFile])
            except subprocess.CalledProcessError:
                self.iface.messageBar().pushMessage(
                    'EGiB GML',
                    'Nie udało się wczytać pliku GML. Wystąpił błąd podczas konwersji GML -> GeoPackage',
                    level=Qgis.Critical)
                return 0
        
        if os.path.isfile(gpkgFile):
            result = QMessageBox.question(self.dockwidget, 'Znany plik',
                'Plik GML o podanej nazwie został już wcześniej wczytany. Czy chcesz go przywrócić?',
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes)
            if result == QMessageBox.No:
                gml2gpkg()
        else:
            gml2gpkg()

        #Add map layers
        root = QgsProject.instance().layerTreeRoot()
        gmlGroup = root.addGroup(gmlName)
        gmlLayers = QgsVectorLayer(gpkgFile, gmlName, 'ogr')
        for layer in gmlLayers.dataProvider().subLayers():
            layerName = layer.split(QgsDataProvider.SUBLAYER_SEPARATOR)[1]
            vlayer = QgsVectorLayer('{}|layername={}'.format(
                gpkgFile,
                layerName
            ), layerName, 'ogr')
            gmlGroup.insertChildNode(1,QgsLayerTreeLayer(vlayer))
            QgsProject.instance().addMapLayer(vlayer, False)
        try:
            os.remove('%s.resolved.gml' % gmlNoExt)
            os.remove('%s.gfs' % gmlNoExt)
        except FileNotFoundError:
            pass

        self.iface.messageBar().pushMessage(
            'EGiB GML',
            'Pomyślnie dodano warstwę GML.',
            level=Qgis.Success)
        self.dockwidget.filePathLabel.setText(os.path.basename(gmlFile))
        self.dockwidget.filePathLabel.setToolTip(gmlFile)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&EGiB GML'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        self.dockwidget.show()
